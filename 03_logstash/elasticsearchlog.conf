input {
    kafka {
        bootstrap_servers   => "<Kafka Broker #1>:9092, <Kafka Broker #2>:9092, <Kafka Broker #3>:9092, <Kafka Broker #4>:9092, <Kafka Broker #5>:9092"
        topics              => "elasticsearch-log"
        group_id            => "elasticsearch-log"
        consumer_threads    => "5"
        type                => "elasticsearch_log"
    }
    kafka {
        bootstrap_servers   => "<Kafka Broker #1>:9092, <Kafka Broker #2>:9092, <Kafka Broker #3>:9092, <Kafka Broker #4>:9092, <Kafka Broker #5>:9092"
        topics              => "elasticsearch-deprecation-log"
        group_id            => "elasticsearch-deprecation-log"
        consumer_threads    => "5"
        type                => "elasticsearch_deprecation_log"
    }
}
 
filter {
    if [type] =~ "elasticsearch" {
        grok {
            pattern_definitions => {
                "ESLOGFORMAT" => "\[%{TIMESTAMP_ISO8601:log-timestamp}\]\[(%{DATA:severity}|%{DATA:severity}\s)\]\[(%{DATA:component}|%{DATA:component}\s)\] \[%{DATA:hostname}\]"
            }
            match => {
                "message" => [
                    "%{ESLOGFORMAT} %{DATA:alert1} free: %{DATA:freeDiskSize}\, %{DATA:alert2}\"\,%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert1} free: %{DATA:freeDiskSize}\, %{DATA:alert2}\"\}%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert1} \(%{DATA:buckets}\) %{DATA:alert2}\"\,%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert1} \(%{DATA:buckets}\) %{DATA:alert2}\"\}%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert}\"\,%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert}\"\}%{GREEDYDATA:msg}",
                    "%{ESLOGFORMAT} %{DATA:alert}\"\}",
                    "%{ESLOGFORMAT} %{GREEDYDATA:alert}"
                ]
            }
            timeout_millis => 1000
        }
 
        ### TIMESTAMP SETTINGS
        mutate { add_field => { "index-timestamp" => "%{@timestamp}" } }
        date {
            match => [ "log-timestamp", "ISO8601" ]
            timezone => "Asia/Seoul"
        }
        mutate { remove_field => [ "log-timestamp" ] }
 
        ### CREATE NEW FIELD indexDate : FOR INDEX NAME
        ruby {
            init => "require 'time'"
            code => "event.set('indexDate', Time.now.utc.getlocal.strftime('%Y.%m.%d'));"
        }
 
        ### MERGE VALUES FROM FIELD alert1 AND alert2 TO alert : ONLY FOR DISK WATERMARK LOGS
        if [alert1] {
            mutate {
                add_field => { "alert" => "%{[alert1]} %{[alert2]}" }
                remove_field => [ "alert1", "alert2" ]
            }
        }
 
        ### REMOVE UNNECESSARY FIELD msg
        if [msg] {
            mutate { remove_field => [ "msg" ] }
        }
    }
}
 
output {
    if [type] =~ "elasticsearch" {
        elasticsearch {
            hosts               => ["<Elasticsearch IP Address #1>:9200", ... "<Elasticsearch IP Address #N>:9200"]
            index               => "elasticsearch-log-%{indexDate}"
        }
    }
}
